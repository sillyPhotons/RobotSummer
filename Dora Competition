#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Servo.h>
#include <NewPing.h>
#include "main.h"


//function definitions
bool search(int search_radius); //search for cans
void run2_motors(Motor *motor1, Motor *motor2, int speed1, int speed2, unsigned int time); //run both motors simultaneously
bool align(); //aligns robot to can after it is detected
void pick_up_can(); //picks up can LOL
void check_boundary(); //checks if robot has hit line & turns to go back into competition zone
void homing(); //return to recycling bin
void new_direction(int travel_time); //If search fails, randomly go to a new direction
bool linear_search(int search_radius, int travel_time, bool check_bound); //searches for object while going straight
void dump(); //dumping cans
void run_motors_lifting(Motor *motor1, Motor *motor2, int speed1, int speed2, unsigned int time); //run both motors simultaneously
void dance(); // for entertainment
//line following functions
void PID(double L, double R);
void runMotors(double LF, double LB, double RF, double RB);
bool checkLine();


//constants
const int search_time = 7000;

//tape following
double P, I, D, error;
double prevError = 0.0;
double Lspeed = INITIAL_SPEED;
double Rspeed = INITIAL_SPEED;

//Component setups
NewPing L_sonar(L_TRIG, L_ECHO, MAX_DISTANCE); //Lower sonar Setup
NewPing U_sonar(U_TRIG, U_ECHO, MAX_DISTANCE); //Upper sonar Setup
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Motor left_motor = Motor(MOTOR_LF, MOTOR_LB);
Motor right_motor = Motor(MOTOR_RF, MOTOR_RB);

void setup() {
   /* //OLED display setup
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0,0);*/

    //sensors & actuators setup
    pinMode(L_ECHO, INPUT); //lower sonar
    pinMode(L_TRIG, OUTPUT); //lower sonar
    pinMode(U_ECHO, INPUT); //upper sonar
    pinMode(U_TRIG, OUTPUT); //upper sonar
    pinMode(MOTOR_RF, OUTPUT); //right motor
    pinMode(MOTOR_RB, OUTPUT); //right motor
    pinMode(MOTOR_LF, OUTPUT); //left motor
    pinMode(MOTOR_RB, OUTPUT); //left motor
    pinMode(R_TAPE, INPUT); //right tape sensor
    pinMode(L_TAPE, INPUT); //left tape sensor
    pinMode(SWITCH, INPUT_PULLUP); //Digital switch

    pwm_start(BUCKET, 50, BUCKET_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(100);
    pwm_start(ARM_SERVO, 50, ARM_UP, MICROSEC_COMPARE_FORMAT);
    delay(100);
    pwm_stop(ARM_SERVO);
    pwm_stop(BUCKET);
    /*
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(2000);
    pwm_start(ARM_SERVO, 50, ARM_H_UP, MICROSEC_COMPARE_FORMAT);
    delay(1000);
    pwm_start(ARM_SERVO, 50, ARM_UP, MICROSEC_COMPARE_FORMAT);
    delay(2000);
    pwm_stop(ARM_SERVO);*/
    randomSeed(analogRead(PB3));
}

//inital state
bool line_following = false;
bool end = false;
bool found = false;
int lf_begin_time;
bool running = true;
bool enter_arena = true;
bool searching = false;
bool dancing = true;
const int start_time = HAL_GetTick();

void loop() {
    if (digitalRead(SWITCH)) { //competition
        if (running) {
            int time_elapsed = HAL_GetTick() - start_time; //time passed in ms
            if (enter_arena) {
                left_motor.run_motor(55);
                right_motor.run_motor(50);
                delay(START_TIME);
                left_motor.run_motor(0);
                right_motor.run_motor(0);
                enter_arena = false;
            } else if (time_elapsed < TOTAL_TIME - HOMING_TIME) {  //search for cans until homing time
                found = search(SEARCH_RADIUS); //searches for can
                if (!found) { //if no can found in search time, go diff direction
                    new_direction(NEW_DIRECTION_TRAVEL);
                } else { //if can found in search time, align with can
                    if(align()) {
                        pick_up_can();
                    }
                }
            } else if (!line_following) { // homing begins when search time ends
                int L = analogRead(L_TAPE), R = analogRead(R_TAPE);
                if (L < B_THRESHOLD && R < B_THRESHOLD) {//straigt line til tape is found
                    left_motor.run_motor(10);
                    right_motor.run_motor(7);
                    delay(1);
                } else if (L >= B_THRESHOLD || R >= B_THRESHOLD) {//tape is found, adjustments to follow tape
                    left_motor.run_motor(0);
                    right_motor.run_motor(0);
                    delay(200);
                    while (true) {
                        L = analogRead(L_TAPE);
                        R = analogRead(R_TAPE);
                        if (L >= B_THRESHOLD || R >= B_THRESHOLD) {
                            break;
                        }
                        left_motor.run_motor(40);
                        right_motor.run_motor(-50);
                        delay(50);
                        left_motor.run_motor(0);
                        right_motor.run_motor(0);
                        delay(100);
                    }
                    left_motor.run_motor(0);
                    right_motor.run_motor(0);
                    delay(50);
                    line_following = true;
                }
            } else if ( line_following && !end) {
                while (HAL_GetTick() - lf_begin_time < LF_EXTRA_TIME) {
                    checkLine();
                } 
                end = checkLine();
            } else  if(end) {
                left_motor.run_motor(0);
                right_motor.run_motor(0);
                delay(600);
                dump();
                running = false;
            }
        }
    } else { //entertainment 
        while (dancing) {
            dance();
            dancing = false;
        }
    }
}

/**
 * Drives robot forward and also searches for can as robot drives
 * @param search_radius: in cm
 * @param travel_time: in ms
 */
bool linear_search(int search_radius, int travel_time, bool check_bound) {
    int t = HAL_GetTick();
    while (HAL_GetTick() - t < travel_time) {
        int L_dist = L_sonar.ping_cm();
        int U_dist = U_sonar.ping_cm(); //get distance of object from upper sensor
        if (U_dist == 0) {
            U_dist = 200;
        }
        if ((L_dist < search_radius && L_dist!= 0) && (U_dist > L_dist * 2 && U_dist > 50)) { //Checks if object is detected within radius
            left_motor.run_motor(0);
            right_motor.run_motor(0);
            delay(100);
            return true;
        } else { //if no object detected, robot keeps going straight
            if(check_bound){
                run2_motors(&left_motor,&right_motor, 55, 55, 1);
            } else {
                left_motor.run_motor(30);
                right_motor.run_motor(35);
                delay(1);
            }         
        }
    }
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    return false;
}

/**
 * Robot searches for can using sonar detection, radial search in a given time limit
 * @param search_radius: in cm
 * @returns true if object is detected
 * @returns false if no object is detected within search time
 */
bool search(int search_radius) {
    int t = HAL_GetTick();

    while (HAL_GetTick() - t < search_time) {
        int L_dist = L_sonar.ping_cm(); //get distance of object from lower sensor
        int U_dist = U_sonar.ping_cm(); //get distance of object from upper sensor
        if (U_dist == 0) {
            U_dist = 200;
        }
        if ((L_dist < search_radius && L_dist!= 0) && (U_dist > L_dist * 2 && U_dist > 50)) { //Checks if object is detected within radius
            left_motor.run_motor(0);
            right_motor.run_motor(0);
            delay(50);
            return true;
        } else { //if no object detected, robot turns right
            run2_motors(&left_motor, &right_motor, 50, -50, 50);
            run2_motors(&left_motor, &right_motor, 0,0, 100);
        }
    }
    return false;
}

/**
 * Aligns robot with can once it is detected
 * @returns true if sonar still sees can after alignment
 * @returns false if sonar can't see the can after alignment
 */
bool align() {
    int t_init = HAL_GetTick(); //time at start of fnc
    int error = L_sonar.ping_cm() - TARGET_DISTANCE;
    int Lspeed, Rspeed;
    int P = 0.6;
    int adjustment_factor_f = 15; //16
    int adjustment_factor_b = 15; //25
    while (HAL_GetTick() - t_init < ALIGN_TIME && abs(error) > ERROR_LIM) {
       // error = L_sonar.convert_cm(L_sonar.ping_median(2)) - TARGET_DISTANCE;
        error = L_sonar.ping_cm() - TARGET_DISTANCE;
        if (error > 0) {  
            Lspeed = constrain(error*P,0,55);
            Lspeed = map(Lspeed,0,55, 8,18);
            Rspeed = Lspeed + adjustment_factor_f;
            left_motor.run_motor(Lspeed);
            right_motor.run_motor(Rspeed);
            delay(1);
        } else if (error < 0) {
            Rspeed = constrain(error*P,-55,0);
            Rspeed = map(Rspeed,-55,0, -33,-25);
            Lspeed = Rspeed - adjustment_factor_b;
            left_motor.run_motor(Lspeed);
            right_motor.run_motor(Rspeed);
            delay(1);
        }
        
    }
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    delay(90);
    error = L_sonar.ping_cm() - TARGET_DISTANCE;
    if (abs(error) < ERROR_LIM) {
        return true;
    } else {
        return false;
    }
}

/**
 * Picks up can after alignment
 * Includes adjustment factor to line up with can
 */
void pick_up_can() {
    run2_motors(&left_motor, &right_motor, 50, -50, 50); //correction for sensor offset
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    delay(300);

    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(700);

    run_motors_lifting(&left_motor,&right_motor, 95,95, 300);
    pwm_start(ARM_SERVO, 50, ARM_H_UP, MICROSEC_COMPARE_FORMAT);
    run_motors_lifting(&left_motor,&right_motor, 95,95, 300);
    pwm_start(ARM_SERVO, 50, ARM_UP, MICROSEC_COMPARE_FORMAT);
    run_motors_lifting(&left_motor,&right_motor, 60,60, 200);
    run2_motors(&left_motor,&right_motor, 0,0,200);
    run2_motors(&left_motor,&right_motor, -40,-45, 600);
    pwm_stop(ARM_SERVO);
}

void dump() {
    left_motor.run_motor(-40);
    right_motor.run_motor(-45);
    delay(1500);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    delay(300);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_start(BUCKET, 50, BUCKET_UP, MICROSEC_COMPARE_FORMAT);
    delay(1000);
    pwm_start(BUCKET, 50, BUCKET_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(1000);
    pwm_stop(BUCKET);
    pwm_start(ARM_SERVO, 50, ARM_UP, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_stop(ARM_SERVO);

}

/**
 * Turns robot in a new direction randomly
 * @param travel_time: time in ms the robot moves after changing direction
 */
void new_direction(int travel_time) {
    int t = HAL_GetTick();
    unsigned int turn_time = random(0,1000); //randomly generates a turn time for robot

    run2_motors(&left_motor, &right_motor, -45, 50, turn_time);
    left_motor.run_motor(0);
    right_motor.run_motor(0);

    if(linear_search(SEARCH_RADIUS, travel_time, true)) {
        left_motor.run_motor(0);
        right_motor.run_motor(0);
        delay(100);
        if(align()) {
            pick_up_can();
        }
    }
}
/**
 * Runs two motors simultaneously at a given speed for a given amount of time
 * specifically for when lifting can
 * @param motor1: motor object
 * @param motor2: motor object
 * @param speed1: speed of motor1 [-100,100]
 * @param speed2: speed of motor2 [-100,100]
 * @param time: time that motors run in ms
 */
void run_motors_lifting(Motor *motor1, Motor *motor2, int speed1, int speed2, unsigned int time) {
    unsigned int initial_t = HAL_GetTick();
    motor1 -> run_motor(speed1);
    motor2 -> run_motor(speed2);
    while (HAL_GetTick() - initial_t < time) {
       int r_val = analogRead(R_TAPE);
        int l_val = analogRead(L_TAPE);
        if (r_val > B_THRESHOLD || l_val > B_THRESHOLD) {
            pwm_start(ARM_SERVO, 50, ARM_UP, MICROSEC_COMPARE_FORMAT); //finish lifting
            delay(100);
            left_motor.run_motor(0);
            right_motor.run_motor(0);

            left_motor.run_motor(-50);
            right_motor.run_motor(-50);
            delay(600);
            left_motor.run_motor(-50);
            right_motor.run_motor(50);
            delay(600);   
            left_motor.run_motor(55);
            right_motor.run_motor(60);
            delay(200);
            left_motor.run_motor(0);
            right_motor.run_motor(0);
            delay(300);
            break;         
        }
    }
}

/**
 * Runs two motors simultaneously at a given speed for a given amount of time
 * @param motor1: motor object
 * @param motor2: motor object
 * @param speed1: speed of motor1 [-100,100]
 * @param speed2: speed of motor2 [-100,100]
 * @param time: time that motors run in ms
 */
void run2_motors(Motor *motor1, Motor *motor2, int speed1, int speed2, unsigned int time) {
    unsigned int initial_t = HAL_GetTick();
    motor1 -> run_motor(speed1);
    motor2 -> run_motor(speed2);
    while (HAL_GetTick() - initial_t < time) {
        check_boundary();
    }
}

/**
 * Checks if robot goes over boundary and adjusts to return to competition area
 */
 
void check_boundary() {
    int r_val = analogRead(R_TAPE);
    int l_val = analogRead(L_TAPE);
    if(r_val > B_THRESHOLD || l_val > B_THRESHOLD) {
        left_motor.run_motor(0);
        right_motor.run_motor(0);
        //stop motor & wait for momentum delay b4 checking where robot is

        r_val = analogRead(R_TAPE);
        l_val = analogRead(L_TAPE);
        if (r_val > B_THRESHOLD && l_val < B_THRESHOLD) { //turn left
            left_motor.run_motor(-50);
            right_motor.run_motor(-55);
            delay(700);
            left_motor.run_motor(-40);
            right_motor.run_motor(50);
            delay(600);
        } else if (r_val < B_THRESHOLD && l_val > B_THRESHOLD) { //turn right
            left_motor.run_motor(-50);
            right_motor.run_motor(-55);
            delay(700);
            left_motor.run_motor(50);
            right_motor.run_motor(-40);
            delay(600);
        } else if (r_val > B_THRESHOLD && l_val > B_THRESHOLD) { //back up & turn 180
            left_motor.run_motor(-50);
            right_motor.run_motor(-55);
            delay(700);
            left_motor.run_motor(-50);
            right_motor.run_motor(50);
            delay(600);
        }
        left_motor.run_motor(55);
        right_motor.run_motor(60);
        delay(300);
        left_motor.run_motor(0);
        right_motor.run_motor(0);
        delay(200);
    } 
}

//This section is my line following code

/*
Checks if robot sees the line or not.
If yes, PID line following.
If no, sharp turn based on previous location to find the line
returns true if end point is found
returns false if end point is not found and is still line following
*/
bool checkLine() {
  double L = analogRead(L_TAPE);
  double R = analogRead(R_TAPE);
  if ((L < TF_THRESHOLD) && (R < TF_THRESHOLD)) {
    if (prevError > 0) {
      runMotors(0, 1000, 1000, 0);
    } else {
       runMotors(1000, 0, 0, 1000);
    }
    return false;
  } else if ((L > E_THRESHOLD) && (R > E_THRESHOLD)) {
      runMotors(0, 0, 0, 0);
      return true;
  } else {   
      PID(L,R);
      return false;
  }  
}

/*
Computes the adjustment for the motors based on how far off the sensors
 are from the line and changes motor speed.

 @param L analog reading from left TCRT5000
 @param R analog reading from right TCRT5000
*/
void PID(double L, double R) {
  error = TF_THRESHOLD - R - (TF_THRESHOLD - L);
  P = error;
  I += error;
  D = error - prevError;
  prevError = error;
  double adj = Kp*P + Ki*I + Kd*D;
  Lspeed = constrain(Lspeed - adj , 200, 1000);
  Rspeed = constrain(Rspeed + adj, 200, 1000);
  runMotors(Lspeed, 0, Rspeed, 0);
}

/*
Sets motor speed
@param LF forwards speed of left motor
@param LB backwards speed of left motor
@param RF forwards speed of right motor
@param RB backwards speed of right motor
*/
void runMotors(double LF, double LB, double RF, double RB) {
  pwm_start(MOTOR_RF, PWMFREQ, RF,RESOLUTION_10B_COMPARE_FORMAT);
  pwm_start(MOTOR_LF, PWMFREQ, LF,RESOLUTION_10B_COMPARE_FORMAT);
  pwm_start(MOTOR_RB, PWMFREQ, RB,RESOLUTION_10B_COMPARE_FORMAT);
  pwm_start(MOTOR_LB, PWMFREQ, LB,RESOLUTION_10B_COMPARE_FORMAT);
}

void dance() {
    delay(500);
    //step clap x 3, robot starts going left
    run2_motors(&left_motor,&right_motor,-50,50,200);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    run2_motors(&left_motor,&right_motor,25,25,700);
    pwm_start(ARM_SERVO, 50, ARM_UP_D, MICROSEC_COMPARE_FORMAT);
    delay(300);
    pwm_stop(ARM_SERVO);
    left_motor.run_motor(0);
    right_motor.run_motor(0);

    run2_motors(&left_motor,&right_motor,50,-50,500);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    run2_motors(&left_motor,&right_motor,25,25,700);
    pwm_start(ARM_SERVO, 50, ARM_UP_D, MICROSEC_COMPARE_FORMAT);
    delay(300);
    pwm_stop(ARM_SERVO);
    left_motor.run_motor(0);
    right_motor.run_motor(0);

    run2_motors(&left_motor,&right_motor,-50,50,500);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    run2_motors(&left_motor,&right_motor,25,25,700);
    pwm_start(ARM_SERVO, 50, ARM_UP_D, MICROSEC_COMPARE_FORMAT);
    delay(300);
    pwm_stop(ARM_SERVO);
    left_motor.run_motor(0);
    right_motor.run_motor(0);

    //turn to face me LOL
    run2_motors(&left_motor,&right_motor,50,-50,900);

    //turn and point x 3, robot turns left
    run2_motors(&left_motor, &right_motor, -50, 50, 150);
    left_motor.run_motor(0);
    right_motor.run_motor(0);

    run2_motors(&left_motor, &right_motor, -50, 50, 150);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_start(ARM_SERVO, 50, ARM_UP_D, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_stop(ARM_SERVO);

    run2_motors(&left_motor, &right_motor, -50, 50, 150);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_start(ARM_SERVO, 50, ARM_UP_D, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_stop(ARM_SERVO);

    run2_motors(&left_motor, &right_motor, -50, 50, 150);
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_start(ARM_SERVO, 50, ARM_UP_D, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_stop(ARM_SERVO);

    //back up with arm down
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    pwm_stop(ARM_SERVO);
    run2_motors(&left_motor, &right_motor, -30,-30, 2000);

    //spin
    run2_motors(&left_motor, &right_motor, 70,-70, 2200);
    //stop, arm down bucket up
    left_motor.run_motor(0);
    right_motor.run_motor(0);
    delay(100);
    pwm_start(ARM_SERVO, 50, ARM_DOWN, MICROSEC_COMPARE_FORMAT);
    delay(500);
    pwm_start(BUCKET, 50, BUCKET_UP, MICROSEC_COMPARE_FORMAT);
    delay(500);
}
